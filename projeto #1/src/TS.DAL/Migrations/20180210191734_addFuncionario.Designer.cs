// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TS.DAL;

namespace TS.DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180210191734_addFuncionario")]
    partial class addFuncionario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TS.DTO.Classes.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("TS.DTO.Classes.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<int>("TipoUsuarioId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("TipoUsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("TS.DTO.Classes.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Status");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("TS.DTO.Classes.RelatorioVenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientesId");

                    b.Property<DateTime>("Data");

                    b.Property<decimal>("Total");

                    b.HasKey("Id");

                    b.HasIndex("ClientesId");

                    b.ToTable("Relatorios");
                });

            modelBuilder.Entity("TS.DTO.Classes.Sessao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClienteId");

                    b.Property<DateTime>("Data");

                    b.Property<int?>("FormaPagamentoId");

                    b.Property<decimal>("Preco");

                    b.Property<int?>("RelatorioVendaId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("RelatorioVendaId");

                    b.ToTable("Sessoes");
                });

            modelBuilder.Entity("TS.DTO.Classes.TipoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("TipoUsuarios");
                });

            modelBuilder.Entity("TS.DTO.Classes.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login");

                    b.Property<string>("Senha");

                    b.Property<int?>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TS.DTO.Classes.Funcionario", b =>
                {
                    b.HasOne("TS.DTO.Classes.TipoUsuario", "TipoUsuario")
                        .WithMany()
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TS.DTO.Classes.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TS.DTO.Classes.RelatorioVenda", b =>
                {
                    b.HasOne("TS.DTO.Classes.Cliente", "Clientes")
                        .WithMany()
                        .HasForeignKey("ClientesId");
                });

            modelBuilder.Entity("TS.DTO.Classes.Sessao", b =>
                {
                    b.HasOne("TS.DTO.Classes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("TS.DTO.Classes.Pagamento", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("FormaPagamentoId");

                    b.HasOne("TS.DTO.Classes.RelatorioVenda")
                        .WithMany("Sessoes")
                        .HasForeignKey("RelatorioVendaId");
                });

            modelBuilder.Entity("TS.DTO.Classes.Usuario", b =>
                {
                    b.HasOne("TS.DTO.Classes.TipoUsuario", "Tipo")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoId");
                });
#pragma warning restore 612, 618
        }
    }
}
